tinydom.LocalStorage.addAdapter('WebkitSQLite', {
	
	/** @public The default cookie ID to use for database storage */
	defaultName : 'db',
	
	dbInfo : {
		name : 'TinyDOMLocalStorage',
		table : 'storage',
		version : '1.0',
		displayName : 'Cache, Settings and Storage',
		quota : 200000,					// 200 k
		minimumQuota : 10000			// 10 k
	},
	
	/**	@public This adapter is the fastest storage mechanism for Webkit. 
	 *	Web SQL has also be discontinued in favour of IndexedDB. Who knew SQL would turn out to be annoying? ...
	 *	In terms of complexity, clearly LocalStorage is better, but for now this adapter can stay at the top of the list.
	 */
	rating : 80,
	
	/** @public Test if this adapter will work in the current environment */
	test : function(storage) {
		/*
		if (navigator.userAgent.match(/\bandroid\b/gim) && window.WebkitTransitionEvent && ("onorientationchange" in window)) {
			return false;
		}
		*/
		return !!window.openDatabase;
		
		/*
		if (window.openDatabase && this._getDatabase(storage)) {
			return true;
		}
		return false;
		*/
		
		/*
		var available = !!(openDatabase in window),
			prev,
			table = 'tbl_'+this._getKey(storage),
			key = 'test_key',
			val = 'test_value';
		if (available) {
			try {
				openDatabase(this.dbInfo.name, this.dbInfo.version, this.dbInfo.displayName, this.dbInfo.quota);
			} catch(err) {
				available = false;
			}
		}
		return available;
		*/
	},
	
	/** @public Load the persisted DB */
	load : function(storage, callback) {
		var db = this._getDatabase(storage),
			key = this._getKey(storage),
			table = this.dbInfo.table,
			errorCB;
		
		callback = callback || this._nullCallback;
		
		if (db) {
			errorCB = function(error) {
				if (error.message.indexOf('no such table')>-1) {
					callback();
				}
				else {
					tinydom.log('WebkitSQLite Adapter Error (load): ' + error.message);
				}
			};
			
			db.transaction(function(tx) {
				if (tx) {
					tx.executeSql('SELECT key,value FROM '+table+' WHERE key=?', [key], function(tx, result) {
						var rows = [];
						if (result && result.rows) {
							for (var x=0; x<result.rows.length; x++) {
								rows.push(result.rows.item(x));
							}
						}
						//console.log(rows, rows[0] && tinydom.json.parse(rows[0].value));
						if (rows.length>0) {
							callback(tinydom.json.parse(rows[0].value));
						}
						else {
							callback();
						}
					});
				}
				else {
					callback(false);
				}
			}, errorCB);
			//console.log('db', db);
			// NOTE: It's not necessary to require() the DB here.  If the query fails, it means there is no stored data, which is fine.
			/*
			this._requireDatabase(storage, function(db) {
				if (db) {
					db.readTransaction(function(tx) {
						console.log(tx);
						tx.executeSql('SELECT * FROM '+table+' WHERE key=? LIMIT 1', [key], function(tx, result) {
							var row = result && result.rows && result.rows[0];
							console.log('row', row);
							callback(row!==undefined && tinydom.json.parse(row))
						}, function(tx, error) {
							tinydom.log('tinydom.LocalStorage :: WebkitSQLiteAdapter: Query failed ('+(error.code || '-1')+') --> ' + error.message);
							callback();
						})
					});
				}
				else {
					tinydom.log('LocalStorage::WebkitSQLiteAdapter --> Error: Could not open database.');
				}
			});
			*/
		}
	},
	
	/** @public Save the DB to cookies */
	save : function(storage, data, callback) {
		var key = this._getKey(storage),
			table = this.dbInfo.table;
		callback = callback || this._nullCallback;
		
		this._requireDatabase(storage, function(db) {
			var errorCB,
				jobs = 1,		//2,
				jobComplete;
			if (db) {
				errorCB = function(error) {
					tinydom.log('WebkitSQLite Adapter Error (save): ' + error.message);
				};
				
				jobComplete = function() {
					jobs -= 1;
					if (jobs<=0) {
						if (callback) {
							callback(true);
						}
						callback = storage = data = errorCB = jobComplete = db = null;
					}
				};
				
				data = tinydom.json.stringify(data);
				
				db.transaction(function(tx){
					/*
					tx.executeSql('DELETE FROM '+table+' WHERE key=?', [key], jobComplete);
					tx.executeSql('INSERT INTO '+table+' (key,value) VALUES(?,?)', [key,data], jobComplete);
					*/
					tx.executeSql('INSERT OR REPLACE INTO '+table+' (key,value) VALUES(?,?)', [key,data], jobComplete);
				}, errorCB);
				
				/*
				db.readTransaction(function(tx) {
					tx.executeSql('SELECT * FROM db', [], function(tx, result) {
						console.log(result, tinydom.toArray(result.rows));
					}, errorCB);
				}, errorCB);
				*/
				
				/*
				db.readTransaction(function(tx) {
					//console.log('tx', tx);
					//tx.executeSql('SELECT * FROM '+table, [], function(tx, result) {
					tx.executeSql('SELECT * FROM '+table+' WHERE key=? LIMIT 1', [key], function(tx, result) {
						console.log('result', result);
						db.transaction(function(tx) {
							//console.log('SQLite::SaveTransactionResult = ', result);
							if (result && result.rows && result.rows.length>0) {
								tx.executeSql('UPDATE '+table+' SET value=? WHERE key=? LIMIT 1', [data, key]);
							}
							else {
								tx.executeSql('INSERT INTO '+table+' (key,value) VALUES(?,?) LIMIT 1', [key, data]);
							}
							if (callback) {
								callback(true);
							}
							key = db = callback = null;
						});
					}, function(tx, error) {
						console.log(error);
					});
				});
				*/
			}
			else {
				callback(false);
				callback = null;
			}
		});
	},
	
	_getDatabase : function(storage) {
		var quota = this.dbInfo.quota,
			db;
		if (this._currentDb) {
			//console.log('_getDatabase() returning stored DB reference.', this._currentDb);
			return this._currentDb;
		}
		//if (storage._webkitSqlLiteAdapterDB) {
		//	return storage._webkitSqlLiteAdapterDB;
		//}
		while (!db && quota>this.dbInfo.minimumQuota) {
			try {
				db = openDatabase(this.dbInfo.name, this.dbInfo.version, this.dbInfo.displayName, quota);
				//console.log('openDatabase('+this.dbInfo.name+', '+this.dbInfo.version+', '+this.dbInfo.displayName+', '+quota+');  ---> ', db);
			}catch(err){}
			if (!db) {
				quota /= 10;
			}
		}
		if (db) {
			this._currentDb = db;
		}
		else {
			tinydom.log('LocalStorage ERROR: WebkitSQLite Adapter failed to open database.');
		}
		return db || false;
	},
	
	_requireDatabase : function(storage, callback) {
		var self = this,
			db = this._getDatabase(storage),
			table = this.dbInfo.table;
		callback = callback || this._nullCallback;
		
		if (db) {
			//tinydom.log('Create table called.');
			self._createTable(db, function() {
				//tinydom.log('Create table callback fired.');
				callback(db);
				self = callback = storage = db = null;
			});
			/*
			//console.log('start::db('+rnd+')', db);
			db.readTransaction(function(tx) {
				//console.log('middle::db('+rnd+')', db);
				// Check if table exists:
				tx.executeSql('SELECT COUNT(*) FROM '+table, [], function(tx, result) {
					var exists = result && result.rows && result.rows.length>0;
					//console.log(result);
					//console.log('table_exists_response: ', result, result.rows.item(0));
					//console.log('end::db('+rnd+')', db);
					if (exists) {
						//console.log('CHECKING TABLE EXISTS ---> EXISTS');
						// it exists
						callback(db);
						self = callback = storage = db = null;
					}
					else {
						self._createTable(db, function() {
							callback(db);
							self = callback = storage = db = null;
						});
					}
				}, function(tx, error) {
					self._createTable(db, function() {
						callback(db);
						self = callback = storage = db = null;
					});
				});
			});
			*/
		}
		else {
			callback(db, false);
			self = callback = storage = null;
		}
	},
	
	_createTable : function(db, callback) {
		var table = this.dbInfo.table;
		callback = callback || this._nullCallback;
		if (db) {
			db.transaction(function(tx) {
				//tinydom.log('CREATING TABLE');
				tx.executeSql('CREATE TABLE IF NOT EXISTS '+table+' (key TEXT UNIQUE, value TEXT)', [], function(tx, result) {
					//tinydom.log('CREATING TABLE --> COMPLETE', tx, result);
					callback(true);
					callback = db = null;
				}, function(tx, error) {
					//tinydom.log('Error creating WebkitSQLite table: ' + error.message);
					callback(false);
				});
			});
		}
		else {
			callback(false);
		}
	},
	
	/** @private Get the key for a storage object */
	_getKey : function(storage) {
		return (storage.id || this.defaultName || '') + '';
	},
	
	_nullCallback : function(){}
	
});